1.

Implement stack using a doubly-linked list
----------------------------------------------

Code in C++
---------------
#include <bits/stdc++.h>
using namespace std;

struct Node {

    struct Node* next;
    int data;
    struct Node* prev;
};

Node* head = NULL;

bool isEmpty() {
    if (head == NULL)
        return true;

    return false;
}
void top_element()
{
    if (isEmpty())
        cout << "stack is empty" << endl;
    else
        cout << "Top: " << head->data << endl;
}
void push(int data) {

    struct Node* temp;
    temp = new Node();
    if (isEmpty())
    {
        temp->data = data;
        temp->prev = NULL;
        temp->next = NULL;
        head = temp;
    }
    else
    {   temp->data = data;
        temp->next = head;
        head->prev = temp;
        temp->prev = NULL;
        head = temp;
    }
}

void stack_size()
{
    int count = 0;

    Node* curr = head;

    while (curr != NULL)
    {
        count++;
        curr = curr->next;
    }

    cout << "size: " << count << endl;
}

void pop() {

    struct Node* temp;
    temp = new Node();

    if (isEmpty())
        cout << "stack is empty" << endl;
    else if (head->next == NULL && head->prev == NULL)
    {
        temp = head;
        head = NULL;
        delete(head);
    }
    else
    {   temp = head;
        head = head->next;
        head->prev = NULL;
        delete(temp);
    }
}

void print_stack() {

    Node* curr = head;

    cout << "elements are: ";

    while (curr != NULL)
    {
        cout << curr->data << " ";
        curr = curr->next;

    }

    cout << endl;

}

int main() {

    push(1);
    push(2);
    push(3);
    push(4);
    push(5);
    print_stack();
    stack_size();
    top_element();
    pop();
    print_stack();
    stack_size();
    pop();
    print_stack();
    stack_size();
    top_element();
    return 0;
}


-------------------------------------------------------------------

stack_implementation_using_doubly_linkedlist.c(Gits)
---------------------------------------------------

#include <stdio.h>
#include <stdlib.h>

struct node 
{
    int data;
    struct node* next;
    struct node* prev;
} *top;


void push(int e)
{
	
	struct node* temp = (struct node*)malloc(sizeof(struct node));
	if (!temp)
	{
	    printf("We cannot allocate memory");
	    return;
	}
	
	printf("Enter element which you want to push\n");
	
	scanf("%d", &e);
	temp->data = e;
	if (top == NULL)
	{
	    temp->next = NULL;
	    temp->prev = NULL;
	    top = temp;
	}
	else
	{
	    top->next = temp;
	    temp->prev = top;
	    top = temp;
	}
}
int pop()
{
    if (top == NULL)
    {
    printf("stack is empty. We have nothing to pop\n");
    return 0;
    
    }
    if(top->next == NULL && top->prev ==NULL){
        int a = top->data;
        struct node *temp;
        temp = top;
        top= NULL;
        free(temp);
        return a;
    }
    struct node *temp;
	temp = top;
	top = top->prev;
	top->next = NULL;
	free(temp);
}	
void display()
{
    struct node *temp = top;
    if (temp==NULL)
    {
        printf("Stack is empty\n");
        return;
    }
     while(temp!= NULL)
    {
        printf("%d  ",temp->data);
        temp = temp->prev;
    }
     printf("\n");
}
	
int main()
{

    int choose_number, e;
    while(1)
    {
        printf("1. push element\n");
        printf("2. pop element\n");
        printf("3. Display elements\n");
        printf("choose a number\n");
        scanf("%d", &choose_number);
        switch (choose_number)
        {
        case 1: push(e);
                break;
        case 2: e = pop();
                printf("e => %d\n", e);
                break;
        case 3: display();
                break;
    
        default: printf("invalid choice\n");
        }
    }
    return 0;
    
}

-------------------------------------------------------------------

Stack using Double linked list.c
------------------------------------

#include <stdio.h>
#include<stdlib.h>
struct node
{
    int val;
    struct node *left;
    struct node *right;
};

struct node* getnode( )
{
    return ( struct node *)malloc( sizeof( struct node ));
};
struct node* top; int c=0;
struct node* add( struct node *);
struct node* del( struct node *);
void display( struct node *);

int main()
{
  struct node *F;
  int ch;
  F = NULL; top=F;
  while( 1 )
  {
      printf("1. Add new element\n");
      printf("2. Delete element\n");
      printf("3. Display elements \n");
      printf("4. Exit \n");
      scanf("%d", &ch );
      if( ch == 1 )
        F = add ( F );
        else if( ch == 2 )
        F=del(F);
        else if(ch==3)
        display( F );
        else if( ch == 4 )
        return;
  }
}

struct node* add( struct node *FIRST)
{
    struct node *T;
    if( FIRST == NULL )
    {
        FIRST = getnode();
        T =top=FIRST;
        T->left=NULL;
    }
    else
    {  T=getnode();
       top->right=T;   T->left=top;
       top=T;
    }
    printf("Enter a val\n"); c++;
    scanf("%d",&T->val );
    T->right= NULL;
    return FIRST;
}
struct node* del( struct node *FIRST)
{
    struct node *T;
    if(( FIRST== NULL)&&(c<1))
    {
     printf("Underflow\n"); return FIRST;
    }
    T=top;
    printf("The deleted value is : %d\n",T->val);
    if(c!=1)
    {top=T->left;
    T->left= NULL; top->right=NULL;}
    else if(c==1)
    {FIRST=NULL;}
    c--;
    return FIRST;
}

void display( struct node *T)
{   if(T==NULL)
   {
       printf("Empty\n"); return;
    }
    while( T != NULL )
    {
        printf("%d  ",T->val);
        T = T->right;
    }
    printf("\n");
}

-------------------------------------------------------------------

