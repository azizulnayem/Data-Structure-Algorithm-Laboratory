 
DsLabFinal/Question1.c
------------------------------
----------------------------------

/*For this problem, you need to use the BST code written in your class.
Implement the function “void delete(int N)” that deletes all nodes of the tree such that M mod
N = 0, where M is the value of the node. For example, if N = 3, the function should delete every node that contains a value divisible by 3.
The node pointed by head is the root node. Your implementation should be as efficient as possible.
Now subtract the smallest integer from each value of the BST and then show all elements inorder.
*/ 
-------------------------------------------------------------------


#include <stdio.h>
#include <stdlib.h>
int arr[15], nt = 0, position = -1, flag = 0;
struct BST
{
    int data;
    struct BST *leftchild;
    struct BST *rightchild;
};
typedef struct BST node;
struct List
{
    int item;
    struct List *next;
    struct List *prev;
};
typedef struct List listNode;
int listSize(listNode *temp)
{
    int i = 0;
    while (temp != NULL)
    {
        temp = temp->next;
        i++;
    }
    return i;
}

listNode *insert_head(listNode *head, int value)
{
    listNode *nn;
    nn = malloc(sizeof(node));
    nn->next = NULL;
    nn->prev = NULL;
    nn->item = value;
    if (head != NULL)
    {
        nn->next = head;
        head->prev = nn;
    }
    head = nn;
    return head;
}

void menu()
{
    printf("\n1. Insert \n");
    printf("2. Delete \n");
    printf("3. Print Tree(In-Order)\n");
    printf("4. Delete all (div by M)\n");
    printf("5. Substart smallest\n");

    printf("0. Exit\n");
    printf("Enter your choice: ");
}
node *insert(node *root, int x)
{

    if (root == NULL)
    {
        root = malloc(sizeof(node));
        root->leftchild = NULL;
        root->rightchild = NULL;
        root->data = x;
    }
    else if (x < root->data)
    {
        root->leftchild = insert(root->leftchild, x);
    }
    else
    {
        root->rightchild = insert(root->rightchild, x);
    }
    return root;
}
void print_inorder(node *root)
{
    if (root == NULL)
        return;
    print_inorder(root->leftchild);
    printf("%d -> ", root->data);
    arr[nt] = root->data;
    nt++;
    print_inorder(root->rightchild);
}

node *minValueNode(node *root)
{
    node *current = root;
    while (current && current->leftchild != NULL)
        current = current->leftchild;

    return current;
}
node *delete (node *root, int value)
{
    if (root == NULL)
        return root;
    if (value < root->data)
        root->leftchild = delete (root->leftchild, value);

    else if (value > root->data)
        root->rightchild = delete (root->rightchild, value);
    else
    {

        if (root->leftchild == NULL)
        {
            node *temp = root->rightchild;
            free(root);
            return temp;
        }
        else if (root->rightchild == NULL)
        {
            node *temp = root->leftchild;
            free(root);
            return temp;
        }
        node *temp = minValueNode(root->rightchild);
        root->data = temp->data;
        root->rightchild = delete (root->rightchild, temp->data);
    }
    return root;
}

listNode *delete_Nth_Position(listNode *head, int n)
{
    int i;

    if (n > listSize(head) || n < 1)
    {
        printf("Invalid position\n\n");
    }
    else
    {
        listNode *temp = head;
        if (n == 1)
        {

            temp = head;
            head = head->next;
            head->prev = NULL;
            printf("%d deleted\n\n", temp->item);
            free(temp);
        }
        else if (n == listSize(head))
        {

            temp = head;
            if (head->next == NULL)
            {
                printf("%d deleted\n\n", temp->item);
                free(temp);
                head = NULL;
            }
            else
            {
                while (temp->next->next != NULL)
                {
                    temp = temp->next;
                }
                listNode *dl = temp->next;
                printf("%d deleted\n\n", dl->item);
                free(dl);
                temp->next = NULL;
            }
        }
        else
        {
            for (i = 1; i <= n - 1; i++)
            {
                temp = temp->next;
            }
            listNode *pr = temp->prev;
            listNode *fw = temp->next;

            pr->next = fw;
            fw->prev = pr;
            printf("%d deleted\n\n", temp->item);
            free(temp);
        }
    }
    return head;
}
listNode *delete_all_Nth_position(listNode *head, int n)
{
    int lsize = listSize(head);
    for (int i = lsize; i > 0; i--)
    {
        if (i % n == 0)
        {
            head = delete_Nth_Position(head, i);
        }
    }
    return head;
}
void printList(listNode *head)
{
    while (head != NULL)
    {
        printf("%d -> ", head->item);
        head = head->next;
    }
    printf("\n\n");
}
int main()
{
    int choice, value;
    node *root = NULL;
    listNode *head = NULL;
    menu();
    scanf("%d", &choice);
    while (choice)
    {
        if (choice == 1)
        {
            printf("Enter value : ");
            scanf("%d", &value);
            root = insert(root, value);
            position++;
        }
        else if (choice == 2)
        {
            printf("Enter value to delete : ");
            scanf("%d", &value);
            root = delete (root, value);
        }
        else if (choice == 3)
        {

            print_inorder(root);

            if (flag == 0)
            {
                for (int i = position; i >= 0; i--)
                {
                    head = insert_head(head, arr[i]);
                }
            }
            else
                break;
            flag = 1;
        }
        else if (choice == 4)
        {
            printf("Enter Nth value : ");
            int s;
            scanf("%d", &s);
            head = delete_all_Nth_position(head, s);

            printf("\n");
        }

        else if (choice == 5)
        {

            int min_value = head->item;
            listNode *temp = head;
            while (temp != NULL)
            {
                if (min_value > temp->item)
                {
                    min_value = temp->item;
                }
                temp = temp->next;
            }
            temp = head;
            while (temp != NULL)
            {
                temp->item = temp->item - min_value;
                temp = temp->next;
            }
            temp = head;
            printf("\n");
        }

        else
            printf("Invalid choice. please try again...\n\n");
        menu();
        scanf("%d", &choice);
    }
    return 0;
}



-------------------------------------------------------------------



DsLabFinal/Question2.c
-------------------------
--------------------------

/*For this problem, you need to modify the doubly linked list code from your class.
Implement 2 function void undo() , void redo().
undo function will undone the changes (insert, delete, update) you have made.
redo function will undone the changes of undo function.
Please keep in mind that multiple occasion of undo and redo should be handled in your code.
*/
-------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>
int *delete_queue[100], *insert_queue[100], d_t = 0, d_h = 0, d_q_size = 0, i_t = 0, i_h = 0, i_q_size = 0;

struct List
{
    int data;
    struct List *next;
    struct List *prev;
};
typedef struct List node;

void menu()
{
    printf("1. Insert (head)\n");
    printf("2. Insert (nth position)\n");
    printf("3. Insert (tail)\n");
    printf("4. Delete (head)\n");
    printf("5. Delete (nth position)\n");
    printf("6. Delete (tail)\n");
    printf("7. Insert (Ascending order)\n");
    printf("9. Print List\n");
    printf("10. UNDO\n");
    printf("11. Redo\n");
    printf("0. Exit\n");
    printf("Enter your choice: ");
}

node *insert_head(node *head, int val)
{
    node *nn;
    nn = malloc(sizeof(node));
    nn->next = NULL;
    nn->prev = NULL;

    nn->data = val;
    if (head != NULL)
    {
        nn->next = head;
        head->prev = nn;
    }
    head = nn;
    return head;
}

node *insert_tail(node *head, int val)
{
    if (head == NULL)
    {
        head = insert_head(head, val);
    }
    else
    {
        node *temp = head;

        while (temp->next != NULL)
        {
            temp = temp->next;
        }
        node *newNode = malloc(sizeof(node));
        newNode->data = val;
        newNode->next = NULL;
        newNode->prev = temp;

        temp->next = newNode;
    }
    return head;
}

node *insert_at_N(node *head, int n, int val)
{
    if (n == 1)
    {
        head = insert_head(head, val);
    }
    else
    {
        if (n >= 2 && n <= listSize(head) + 1)
        {
            if (n == listSize(head) + 1)
            {
                head = insert_tail(head, val);
            }
            else
            {
                node *temp;
                int i;
                temp = head;
                for (i = 1; i <= n - 2; i++)
                {
                    temp = temp->next;
                }
                node *newNode = malloc(sizeof(node));
                printf("Enter data: ");
                scanf("%d", &newNode->data);
                newNode->next = temp->next;
                newNode->prev = temp;
                temp->next = newNode;
                newNode->next->prev = newNode;
            }
        }
        else
        {
            printf("Invalid position...\n\n");
        }
    }
    return head;
}
node *delete_head(node *head)
{
    if (head == NULL)
    {
        printf("list is empty.\n\n");
    }
    else
    {
        node *temp = head;
        head = head->next;
        head->prev = NULL;
        printf("%d deleted\n\n", temp->data);
        free(temp);
    }
    return head;
}
node *delete_Nth_Position(node *head, int n)
{
    int i;

    if (n > listSize(head) || n < 1)
    {
        printf("Invalid position\n\n");
    }
    else
    {
        node *temp = head;
        if (n == 1)
        {

            temp = head;
            head = head->next;
            head->prev = NULL;
            printf("%d deleted\n\n", temp->data);
            free(temp);
        }
        else if (n == listSize(head))
        {

            temp = head;
            if (head->next == NULL)
            {
                printf("%d deleted\n\n", temp->data);
                free(temp);
                head = NULL;
            }
            else
            {
                while (temp->next->next != NULL)
                {
                    temp = temp->next;
                }
                node *dl = temp->next;
                printf("%d deleted\n\n", dl->data);
                free(dl);
                temp->next = NULL;
            }
        }
        else
        {
            for (i = 1; i <= n - 1; i++)
            {
                temp = temp->next;
            }
            node *pr = temp->prev;
            node *fw = temp->next;

            pr->next = fw;
            fw->prev = pr;
            printf("%d deleted\n\n", temp->data);
            free(temp);
        }
    }
    return head;
}
node *delete_tail(node *head)
{
    node *temp = head;
    if (head->next == NULL)
    {
        printf("%d deleted\n\n", temp->data);
        free(temp);
        head = NULL;
    }
    else
    {
        while (temp->next->next != NULL)
        {
            temp = temp->next;
        }
        node *dl = temp->next;
        printf("%d deleted\n\n", dl->data);
        free(dl);
        temp->next = NULL;
    }
    return head;
}

node *insert_ascending(node *head, int val)
{
    node *temp = head, *nn;

    if (head == NULL)
        head = insert_head(head, val);
    else
    {
        nn = malloc(sizeof(node));
        nn->next = NULL;
        nn->prev = NULL;
        nn->data = val;

        while (temp->data <= nn->data && temp->next != NULL)
            temp = temp->next;
        if (temp->next == NULL)
        {
            nn->next = NULL;
            nn->prev = temp;
            temp->next = nn;
        }
        else if (temp->prev == NULL)
        {
            if (head != NULL)
            {
                nn->next = head;
                head->prev = nn;
            }
            head = nn;
        }
        else
        {
            node *pr = temp->prev;
            nn->next = temp;
            nn->prev = pr;
            temp->prev = nn;
            pr->next = nn;
        }
    }
    return head;
}
node *undo(node *head, int val)
{

    int n = listSize(head);
    delete_queue[d_t] = delete_head(head);
    insert_queue[d_t] = insert_head(head, val);
    d_t = (d_t + 1) % n;
    d_q_size++;
    i_t = (d_t + 1) % n;
    i_q_size++;
    return head;
}
node *redo(node *head, int val)
{
    int n = listSize(head);
    int i_val = insert_queue[d_h];
    insert_head(i_val, val);
    d_h = (d_h + 1) % n;
    d_q_size--;
    int d_val = delete_queue[d_h];
    delete_head(i_val);
    i_h = (d_h + 1) % n;
    i_q_size--;
    return head;
}
void printList(node *temp)
{
    while (temp != NULL)
    {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n\n");
}

int listSize(node *temp)
{
    int i = 0;
    while (temp != NULL)
    {
        temp = temp->next;
        i++;
    }
    return i;
}
int main()
{
    int ch, n, i;
    node *head = NULL, *temp, *newNode;
    menu();
    scanf("%d", &ch);

    while (ch)
    {
        int val = 0;
        if (ch == 1)
        {

            printf("Enter the value : ");
            scanf("%d", &val);
            head = insert_head(head, val);
        }
        else if (ch == 2)
        {
            printf("Enter position: ");
            scanf("%d", &n);
            head = insert_at_N(head, n, val);
        }
        else if (ch == 3)
        {
            printf("Enter the value : ");
            scanf("%d", &val);
            head = insert_tail(head, val);
        }
        else if (ch == 4)
        {
            head = delete_head(head);
        }
        else if (ch == 5)
        {
            if (head == NULL)
            {
                printf("list is empty.\n\n");
            }
            else
            {
                printf("Enter position: ");
                scanf("%d", &n);
                head = delete_Nth_Position(head, n);
            }
        }
        else if (ch == 6)
        {
            if (head == NULL)
            {
                printf("list is empty.\n\n");
            }
            else
            {
                head = delete_tail(head);
            }
        }
        else if (ch == 9)
        {
            printList(head);
        }
        else if (ch == 7)
        {
            printf("Enter the value : ");
            scanf("%d", &val);
            head = insert_ascending(head, val);
        }
        else if (ch == 10)
        {

            undo(head, val);
        }
        else if (ch == 11)
        {
            redo(head, val);
        }
        else
        {
            printf("Invalid choice. please try again...\n\n");
        }
        menu();
        scanf("%d", &ch);
    }

    return 0;
}


-------------------------------------------------------------------


Queue.c
------------
-----------------


#include<stdio.h>

void menu();

int main()
{
    int data[100], n, ch, head = 0, tail = 0, q_size = 0;

    printf("enter queue size: ");
    scanf("%d",&n);

    menu();
    scanf("%d",&ch);

    while(ch)
    {
        if(ch == 1)
        {
            //enqueue
            if(q_size == n)
            {
                printf("queue is full. unable to enqueue.\n\n");
            }
            else
            {
                printf("enter value to enqueue: ");
                scanf("%d",&data[tail]);
                tail = (tail + 1) % n;
                q_size++;
            }
        }
        else if(ch == 2)
        {
            //dequeue
            if(q_size == 0)
            {
                printf("queue is empty. unable to dequeue.\n\n");
            }
            else
            {
                printf("%d dequeued\n\n",data[head]);
                head = (head + 1) % n;
                q_size--;
            }

        }
        else if(ch == 3)
        {
            //top value
            if(q_size > 0)
            {
                printf("next value to dequeue: %d\n\n",data[head]);
            }
            else
            {
                printf("queue is empty\n\n");
            }

        }
        else if(ch == 4)
        {
            //size
            printf("queue size: %d\n\n",q_size);
        }
        else
        {
            printf("invalid choice. please try again!!!\n");
        }
        menu();
        scanf("%d",&ch);
    }






    return 0;
}

void menu()
{
    printf("1. enqueue\n");
    printf("2. dequeue\n");
    printf("3. top\n");
    printf("4. size\n");
    printf("0. exit\n");
    printf("enter your choice: ");
}