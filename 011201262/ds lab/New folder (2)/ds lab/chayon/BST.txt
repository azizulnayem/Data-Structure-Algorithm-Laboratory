1.
Binary Search Tree(FULL)

------------------------------

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
struct BST
{
    int data;
    struct BST *leftchild;
    struct BST *rightchild;
};
typedef struct BST node;
void menu()
{
    printf("1. Insert \n");
    printf("2. Delete \n");
    printf("7. Print Tree(Pre-Order)\n");
    printf("8. Print Tree(In-Order)\n");
    printf("9. Print Tree(Post-Order)\n");
    printf("0. Exit\n");
    printf("Enter your choice: ");
}
//testing
node *insert(node *root, int x)
{
    if (root == NULL)
    {
        root = malloc(sizeof(node));
        root->leftchild = NULL;
        root->rightchild = NULL;
        root->data = x;
    }
    else if (x < root->data)
    {
        root->leftchild = insert(root->leftchild, x);
    }
    else
    {
        root->rightchild = insert(root->rightchild, x);
    }
    return root;
}
void print_preorder(node *root)
{
    if (root == NULL)
        return;
    printf("%d -> ", root->data);
    print_preorder(root->leftchild);
    print_preorder(root->rightchild);
}
void print_inorder(node *root)
{
    if (root == NULL)
        return;
    print_inorder(root->leftchild);
    printf("%d -> ", root->data);
    print_inorder(root->rightchild);
}
void print_postorder(node *root)
{
    if (root == NULL)
        return;
    print_postorder(root->leftchild);
    print_postorder(root->rightchild);
    printf("%d -> ", root->data);
}
node *minValueNode(node *root)
{
    node *current = root;
    while (current && current->leftchild != NULL)
        current = current->leftchild;
    return current;
}
node *delete (node *root, int value)
{
    if (root == NULL)
        return root;
    if (value < root->data)
        root->leftchild = delete (root->leftchild, value);
    else if (value > root->data)
        root->rightchild = delete (root->rightchild, value);
    else
    {
        if (root->leftchild == NULL)
        {
            node *temp = root->rightchild;
            free(root);
            return temp;
        }
        else if (root->rightchild == NULL)
        {
            node *temp = root->leftchild;
            free(root);
            return temp;
        }
        node *temp = minValueNode(root->rightchild);
        root->data = temp->data;
        root->rightchild = delete (root->rightchild, temp->data);
    }
    return root;
}
bool isleaf(node *root)
{
    return root->leftchild == NULL && root->rightchild == NULL;
}
int height(node *root)
{
    if (root == NULL)
        return -1;
    if (isleaf(root))
        return 0;
    return 1 + max(height(root->leftchild), height(root->rightchild));
}
int max(int n1, int n2)
{
    return (n1 > n2) ? n1 : n2;
}
int size(node *root)
{
    if (root == NULL)
        return 0;
    if (isleaf(root))
        return 1;
    return 1 + size(root->leftchild) + size(root->rightchild);
}
int leaves(node *root)
{
    if (root == NULL)
        return 0;
    if (isleaf(root))
        return 1;
    return leaves(root->leftchild) + leaves(root->rightchild);
}
bool contains(node *root, int value)
{
    if (root == NULL)
        return false;
    if (root->data == value)
        return true;
    return contains(root->leftchild, value) || contains(root->rightchild, value);
}
int main()
{
    int choice, value;
    node *root = NULL;
    menu();
    scanf("%d", &choice);
    while (choice)
    {
        if (choice == 1)
        {
            printf("Enter value : ");
            scanf("%d", &value);
            root = insert(root, value);
        }
        else if (choice == 2)
        {
            printf("Enter value to delete : ");
            scanf("%d", &value);
            root = delete (root, value);
        }
        else if (choice == 7)
        {
            print_preorder(root);
            printf("\n");
        }
        else if (choice == 8)
        {
            print_inorder(root);
            printf("\n");
        }
        else if (choice == 9)
        {
            print_postorder(root);
            printf("\n");
        }
        else
            printf("Invalid choice. please try again...\n\n");
        menu();
        scanf("%d", &choice);
    }
    return 0;
}

-------------------------------------------------------------------

2.
Sqrt function (Using BST)
--------------------------------


/*#include <stdio.h>
int dayofweek(int q, int m, int y)
{
    return ((q + (((26 * (m + 1)) / 10)) + y + (y / 4) + (6 * (y / 100)) + (y / 400)) % 7);
}
int main()
{
    int year, month, day;
    printf("\nEnter year: ");
    scanf("%d", &year);
    printf("\nEnter month(1-12): ");
    scanf("%d", &month);
    printf("\nEnter day: ");
    scanf("%d", &day);
    printf("Days of week %d\n", dayofweek(day, month, year));
    return 0;
}
*/
// C program to print the month by month
// calendar for the given year

#include <stdio.h>

// Function that returns the index of the
// day for date DD/MM/YYYY
int dayNumber(int day, int month, int year)
{

    static int t[] = { 0, 3, 2, 5, 0, 3,
                       5, 1, 4, 6, 2, 4 };
    year -= month < 3;
    return (year + year / 4
            - year / 100
            + year / 400
            + t[month - 1] + day)
           % 7;
}

// Function that returns the name of the
// month for the given month Number
// January - 0, February - 1 and so on
char* getMonthName(int monthNumber)
{
    char* month;

    switch (monthNumber) {
    case 0:
        month = "January";
        break;
    case 1:
        month = "February";
        break;
    case 2:
        month = "March";
        break;
    case 3:
        month = "April";
        break;
    case 4:
        month = "May";
        break;
    case 5:
        month = "June";
        break;
    case 6:
        month = "July";
        break;
    case 7:
        month = "August";
        break;
    case 8:
        month = "September";
        break;
    case 9:
        month = "October";
        break;
    case 10:
        month = "November";
        break;
    case 11:
        month = "December";
        break;
    }
    return month;
}

// Function to return the number of days
// in a month
int numberOfDays(int monthNumber, int year)
{
    // January
    if (monthNumber == 0)
        return (31);

    // February
    if (monthNumber == 1) {
        // If the year is leap then Feb
        // has 29 days
        if (year % 400 == 0
            || (year % 4 == 0
                && year % 100 != 0))
            return (29);
        else
            return (28);
    }

    // March
    if (monthNumber == 2)
        return (31);

    // April
    if (monthNumber == 3)
        return (30);

    // May
    if (monthNumber == 4)
        return (31);

    // June
    if (monthNumber == 5)
        return (30);

    // July
    if (monthNumber == 6)
        return (31);

    // August
    if (monthNumber == 7)
        return (31);

    // September
    if (monthNumber == 8)
        return (30);

    // October
    if (monthNumber == 9)
        return (31);

    // November
    if (monthNumber == 10)
        return (30);

    // December
    if (monthNumber == 11)
        return (31);
}

// Function to print the calendar of
// the given year
void printCalendar(int year)
{
    printf("     Calendar - %d\n\n", year);
    int days;

    // Index of the day from 0 to 6
    int current = dayNumber(1, 1, year);

    // i for Iterate through months
    // j for Iterate through days
    // of the month - i
    for (int i = 0; i < 12; i++) {
        days = numberOfDays(i, year);

        // Print the current month name
        printf("\n ------------%s-------------\n",
               getMonthName(i));

        // Print the columns
        printf(" Sun   Mon  Tue  Wed  Thu  Fri  Sat\n");

        // Print appropriate spaces
        int k;
        for (k = 0; k < current; k++)
            printf("     ");

        for (int j = 1; j <= days; j++) {
            printf("%5d", j);

            if (++k > 6) {
                k = 0;
                printf("\n");
            }
        }

        if (k)
            printf("\n");

        current = k;
    }

    return;
}


int main()
{
    int year = 2005;
    

    
    printCalendar(year);
    return 0;
}


-------------------------------------------------------------------

3.

Sqrt_Function.c
------------------

#include <stdio.h>
#include <math.h>

int SqrtFunction(int n)//squre function
{
    int low = 0, high = n;
    if (n < 2)
        return n;

    while (low <= high)
    {
        int mid = (low + high) / 2;
        if ((mid * mid) == n)
            return mid;
        else if ((mid * mid) > n)
            high = mid - 1;
        else
            low = mid + 1;
    }
    return fabs(high);
}
void print_sqrtFunction(double n)//squre function using bst(Binary search tree)
{
    double low = 0, high = n;

    if (n < 2)
        printf("n is %.2lf\n", n);

    while (low <= high)
    {
        double mid = (low + high) / 2;
        printf("Low %.2lf\tHigh %.2lf\t", fabs(low), fabs(high));
        printf("Mid %2.lf\n", mid);
        if ((mid * mid) == n)
        {
            printf("Mid %2.lf\t ", mid);
            break;
        }
        else if ((mid * mid) > n)
            high = mid - 1;
        else
            low = mid + 1;
    }
    printf("\nSqrt = %.2lf \n", high);
    return;
}
int main()
{
    int n;
    printf("Enter value : ");
    scanf("%d", &n);
    print_sqrtFunction(n);
    printf("\nSqure root of %d is : %d\n", n, SqrtFunction(n));

    return 0;
}

-------------------------------------------------------------------

4.
BST to find sqrt value (main function)
--------------------------------------------


#include <stdio.h>
#include <math.h>

int main()
{
    double th = 0.005,n,lo=0.0,hi,mid;
    scanf("%lf",&n);
    hi = n;
    while(1)
    {
        mid = (lo+hi)/2;
        if(fabs(n-(mid*mid))<th)
        {
            printf("sqr root: %.2lf\n",mid);
            break;
        }
        else if((mid*mid)<n)
            lo=mid+1;
        else
            hi=mid-1;
    }

    return 0;//bst to find sqrt value
}

-------------------------------------------------------------------