#include<bits/stdc++.h>
using namespace std;

// Function for Swapping elements by passing the elements as reference.
// As we are passing address, after swapping, the original position of the elements will change
void Swap(int *a,int *b){
    int temp=*a;
    *a=*b;
    *b=temp;
}

// Function for printing an array
void PrintArray(int arr[],int Size){
    for(int i=0;i<Size;i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
}

// Function for Bubble Sort (Optimized)
void BubbleSort(int a[],int s){
    for(int step=0;step<s-1;step++){
        for(int i=0;i<s-step-1;i++){
            if(a[i]>a[i+1]){
                Swap(&a[i],&a[i+1]);
            }
        }
    }
}

// Function for Insertion Sort
void InsertionSort(int a[],int n){

    for(int i=1;i<n;i++){
        int key=a[i];
        int j=i-1;
        while(a[j]>key && j>=0){
            a[j+1]=a[j];
            j--;
        }
        a[j+1]=key;
    }

    cout<<"The sorted array in ascending order is: "<<endl;
    PrintArray(a,n);

}

// Function for Selection Sort
void SelectionSort(int arr[], int n){
	for(int i=0; i<n; i++)
	{
		int min_idx=i;
		for(int j=i+1;j<n;j++)
		{
			if(arr[j]<arr[min_idx])
			{
				min_idx = j;
			}
		}
		Swap(&arr[min_idx], &arr[i]);
	}
}

int main()
{
    int Size;

    cout<<"Enter the size of the array: ";
    cin>>Size;

    int arr[Size];
    cout<<"Enter the "<<Size<<" elements of the array: ";
    for(int i=0;i<Size;i++){
        cin>>arr[i];
    }

    int choice;
    cout<<"Choose the sorting algorithm you wish to implement: "<<endl;
    cout<<"\t 1 for Bubble Sort"<<endl;
    cout<<"\t 2 for Insertion Sort"<<endl;
    cout<<"\t 3 for Selection Sort"<<endl;
    cin>>choice;

    switch (choice)
    {
    case 1:
        BubbleSort(arr,Size);
        cout<<"The sorted array in ascending order is: "<<endl;
        PrintArray(arr,Size);
        break;
    case 2:
        InsertionSort(arr,Size);
        break;
    default:
        SelectionSort(arr,Size);
        PrintArray(arr,Size);
        break;
    }

    return 0;
}
