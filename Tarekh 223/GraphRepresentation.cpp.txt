#include<iostream>
#include<vector>
#include<queue>
using namespace std;

/// BFS - Breath First Searching
bool BFS(vector< int > adjacentList[], int V, int source, int destination)
{
    queue< int > Queue;
    int visited[V] = {0};
    Queue.push(source);

    while(Queue.size()!=0)
    {
        int currentNode = Queue.front();
        Queue.pop();

        for(int i=0; i<adjacentList[currentNode].size(); i++)
        {
            int to = adjacentList[currentNode][i];
            if(visited[to]==0)
                Queue.push(to);
        }
        visited[currentNode] = 1;
    }

    if(visited[destination]==1) return true;
    else return false;
}

int main()
{
    freopen("input.txt", "r", stdin);
    /// vector< vector< int > > v;
    int V,E;
    cin >> V >> E;

    /// int adjacencyList[V]<vector>
    vector< int > adjacencyList[V];
    for(int i=1; i<=E; i++)
    {
        int from, to; cin >> from >> to;
        adjacencyList[from].push_back(to);
    }

    /**for(int i=0; i<V; i++)
    {
        cout << i << " -> ";
        for(int j=0; j<adjacencyList[i].size(); j++)
        {
            cout << adjacencyList[i][j] << " ";
        }
        cout << endl;
    }**/

    cout << BFS(adjacencyList, V, 2, 1) << endl;




    return 0;
}
