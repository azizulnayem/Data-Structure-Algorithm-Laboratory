#include<iostream>
#include<stdio.h>
using namespace std;

struct ListNode
{
    int value;
    ListNode *next;
    ListNode *prev;
};

ListNode* head = NULL;
ListNode* tail = NULL;

ListNode* createListNode(int data)
{
    ListNode* temp = new ListNode();
    temp->value = data;
    temp->next = NULL;
    temp->prev = NULL;
    return temp;
}

ListNode* linearSearch(int key)
{
    for(ListNode* i=head;i!=NULL;i=i->next)
    {
        if(i->value==key)
            return i;
    }
    return NULL;
}

void insertFirst(int data)
{
    if(head==NULL)
    {
        ListNode* temp = createListNode(data);
        head = temp;
        tail = head;
        temp = NULL;
    }
    else
    {
        ListNode* temp = createListNode(data);
        temp->next = head;
        head->prev = temp;
        head = temp;
        temp = NULL;
    }
}

void insertLast(int data)
{
    if(head==NULL)
    {
        ListNode* temp = createListNode(data);
        head = temp;
        tail = head;
        temp = NULL;
    }
    else
    {
        ListNode* temp = createListNode(data);
        tail->next = temp;
        temp->prev = tail;
        tail = tail->next;
        temp = NULL;
    }
}

void insertMiddle(int insertAfter, int data)
{
    if(head==NULL)
    {
        ListNode* temp = createListNode(data);
        head = temp;
        tail = head;
        temp = NULL;
    }
    else
    {
        ListNode* loc = linearSearch(insertAfter);
        if(loc==NULL) return;

        ListNode* temp = createListNode(data);

        temp->next = loc->next;
        loc->next->prev = temp;

        loc->next = temp;
        temp->prev = loc;

        temp = NULL;
    }
}


ListNode* previousLocation(int data)
{
    ListNode* prevLoc = NULL;
    ListNode* loc = head;
    while(loc!=NULL && loc->value!=data)
    {
        prevLoc = loc;
        loc = loc->next;
    }
    if(loc==NULL)
        return NULL;
    else
        return prevLoc;
}

void printList()
{
    printf("The elements of the linked list: ");
    for(ListNode* i = head; i!=NULL; i=i->next)
    {
        printf("%d ", i->value);
    }
    printf("\n");
}

void deleteFirst()
{
    if(head==NULL) return;

    ListNode* temp = head;
    head = head->next;
    temp->next = NULL;
    head->prev = NULL;
    delete(temp);
}

void deleteLast()
{
    if(tail==NULL) return;

    /// Time Complexity: O(n)
    /**ListNode* pLoc = previousLocation(tail->value);
    pLoc->next = NULL;
    tail->prev = NULL;
    delete(tail);
    tail = pLoc;
    pLoc = NULL;**/


    /// Time Complexity: O(1)
    ListNode* temp = tail;
    tail = tail->prev;
    tail->next = NULL;
    temp->prev = NULL;
    delete(temp);
}

void deleteMiddle(int data)
{
    ListNode* pLoc = previousLocation(data);
    if(pLoc==NULL) return;

    ListNode *loc = pLoc->next;

    pLoc->next = loc->next;
    loc->next->prev = pLoc;

    loc->next = NULL;
    loc->prev = NULL;
    delete(loc);
}

int main()
{
    for(int i=10;i<=100; i+=10)
        insertFirst(i);
    printList();

    deleteFirst();
    printList();

    deleteLast();
    printList();

    deleteMiddle(50);
    printList();

    deleteMiddle(75);
    printList();

    insertMiddle(70, 75);
    printList();
    return 0;
}

