Implement selection sort and bubble sort in cpp.  You cannot use built-in selection sort and bubble sort. The first line of the file will describe how many inputs there are in the file. 
Let us call this value k. In each of the following k lines, there will be a series of integers:                                 
3
7 3 1 8 0 2
2 1 2 3 4 -1
0 1 3 1 2 4
you should read all of these things from a file. after that sort them using bubbles and selection.

The output will have to be printed in a separate file. 
The output text file should contain like these for that inputted series of integers:
0 1 2 3 7 8
-1 1 2 2 3 4
0 1 1 2 3 4

Use generics/templates to handle any data type. 
For the series of integers in both cases, track the number of swaps that needed to be sorted. Do it in an efficient format using vector.

#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

template<typename T>
void selection_sort(vector<T>& arr, int& swaps) {
    int n = arr.size();
    for (int i = 0; i < n - 1; i++) {
        int min_idx = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
        }
        if (min_idx != i) {
            swap(arr[i], arr[min_idx]);
            swaps++;
        }
    }
}

template<typename T>
void bubble_sort(vector<T>& arr, int& swaps) {
    int n = arr.size();
    for (int i = 0; i < n - 1; i++) {
        bool swapped = false;
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
                swaps++;
                swapped = true;
            }
        }
        if (!swapped) {
            break;
        }
    }
}

int main() {
    ifstream input_file("input.txt");
    ofstream output_file("output.txt");
    int k;
    input_file >> k;
    for (int i = 0; i < k; i++) {
        int n, swaps = 0;
        input_file >> n;
        vector<int> arr(n);
        for (int j = 0; j < n; j++) {
            input_file >> arr[j];
        }
        selection_sort(arr, swaps);
        output_file << "Selection Sort: " << swaps << endl;
        swaps = 0;
        bubble_sort(arr, swaps);
        output_file << "Bubble Sort: " << swaps << endl;
    }
    return 0;
}

